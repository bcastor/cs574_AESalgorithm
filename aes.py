from copy import deepcopy

sbox = {"0x0": 0x63, "0x1": 0x7C, "0x2": 0x77, "0x3": 0x7B, "0x4": 0xF2, "0x5": 0x6B, "0x6": 0x6F, "0x7": 0xC5,
        "0x8": 0x30, "0x9": 0x01, "0xa": 0x67, "0xb": 0x2B, "0xc": 0xFE, "0xd": 0xD7, "0xe": 0xAB, "0xf": 0x76,
        "0x10": 0xCA, "0x11": 0x82, "0x12": 0xC9, "0x13": 0x7D, "0x14": 0xFA, "0x15": 0x59, "0x16": 0x47, "0x17": 0xF0,
        "0x18": 0xAD, "0x19": 0xD4, "0x1a": 0xA2, "0x1b": 0xAF, "0x1c": 0x9C, "0x1d": 0xA4, "0x1e": 0x72, "0x1f": 0xC0,
        "0x20": 0xB7, "0x21": 0xFD, "0x22": 0x93, "0x23": 0x26, "0x24": 0x36, "0x25": 0x3F, "0x26": 0xF7, "0x27": 0xCC,
        "0x28": 0x34, "0x29": 0xA5, "0x2a": 0xE5, "0x2b": 0xF1, "0x2c": 0x71, "0x2d": 0xD8, "0x2e": 0x31, "0x2f": 0x15,
        "0x30": 0x04, "0x31": 0xC7, "0x32": 0x23, "0x33": 0xC3, "0x34": 0x18, "0x35": 0x96, "0x36": 0x05, "0x37": 0x9A,
        "0x38": 0x07, "0x39": 0x12, "0x3a": 0x80, "0x3b": 0xE2, "0x3c": 0xEB, "0x3d": 0x27, "0x3e": 0xB2, "0x3f": 0x75,
        "0x40": 0x09, "0x41": 0x83, "0x42": 0x2C, "0x43": 0x1A, "0x44": 0x1B, "0x45": 0x6E, "0x46": 0x5A, "0x47": 0xA0,
        "0x48": 0x52, "0x49": 0x3B, "0x4a": 0xD6, "0x4b": 0xB3, "0x4c": 0x29, "0x4d": 0xE3, "0x4e": 0x2F, "0x4f": 0x84,
        "0x50": 0x53, "0x51": 0xD1, "0x52": 0x00, "0x53": 0xED, "0x54": 0x20, "0x55": 0xFC, "0x56": 0xB1, "0x57": 0x5B,
        "0x58": 0x6A, "0x59": 0xCB, "0x5a": 0xBE, "0x5b": 0x39, "0x5c": 0x4A, "0x5d": 0x4C, "0x5e": 0x58, "0x5f": 0xCF,
        "0x60": 0xD0, "0x61": 0xEF, "0x62": 0xAA, "0x63": 0xFB, "0x64": 0x43, "0x65": 0x4D, "0x66": 0x33, "0x67": 0x85,
        "0x68": 0x45, "0x69": 0xF9, "0x6a": 0x02, "0x6b": 0x7F, "0x6c": 0x50, "0x6d": 0x3C, "0x6e": 0x9F, "0x6f": 0xA8,
        "0x70": 0x51, "0x71": 0xA3, "0x72": 0x40, "0x73": 0x8F, "0x74": 0x92, "0x75": 0x9D, "0x76": 0x38, "0x77": 0xF5,
        "0x78": 0xBC, "0x79": 0xB6, "0x7a": 0xDA, "0x7b": 0x21, "0x7c": 0x10, "0x7d": 0xFF, "0x7e": 0xF3, "0x7f": 0xD2,
        "0x80": 0xCD, "0x81": 0x0C, "0x82": 0x13, "0x83": 0xEC, "0x84": 0x5F, "0x85": 0x97, "0x86": 0x44, "0x87": 0x17,
        "0x88": 0xC4, "0x89": 0xA7, "0x8a": 0x7E, "0x8b": 0x3D, "0x8c": 0x64, "0x8d": 0x5D, "0x8e": 0x19, "0x8f": 0x73,
        "0x90": 0x60, "0x91": 0x81, "0x92": 0x4F, "0x93": 0xDC, "0x94": 0x22, "0x95": 0x2A, "0x96": 0x90, "0x97": 0x88,
        "0x98": 0x46, "0x99": 0xEE, "0x9a": 0xB8, "0x9b": 0x14, "0x9c": 0xDE, "0x9d": 0x5E, "0x9e": 0x0B, "0x9f": 0xDB,
        "0xa0": 0xE0, "0xa1": 0x32, "0xa2": 0x3A, "0xa3": 0x0A, "0xa4": 0x49, "0xa5": 0x06, "0xa6": 0x24, "0xa7": 0x5C,
        "0xa8": 0xC2, "0xa9": 0xD3, "0xaa": 0xAC, "0xab": 0x62, "0xac": 0x91, "0xad": 0x95, "0xae": 0xE4, "0xaf": 0x79,
        "0xb0": 0xE7, "0xb1": 0xC8, "0xb2": 0x37, "0xb3": 0x6D, "0xb4": 0x8D, "0xb5": 0xD5, "0xb6": 0x4E, "0xb7": 0xA9,
        "0xb8": 0x6C, "0xb9": 0x56, "0xba": 0xF4, "0xbb": 0xEA, "0xbc": 0x65, "0xbd": 0x7A, "0xbe": 0xAE, "0xbf": 0x08,
        "0xc0": 0xBA, "0xc1": 0x78, "0xc2": 0x25, "0xc3": 0x2E, "0xc4": 0x1C, "0xc5": 0xA6, "0xc6": 0xB4, "0xc7": 0xC6,
        "0xc8": 0xE8, "0xc9": 0xDD, "0xca": 0x74, "0xcb": 0x1F, "0xcc": 0x4B, "0xcd": 0xBD, "0xce": 0x8B, "0xcf": 0x8A,
        "0xd0": 0x70, "0xd1": 0x3E, "0xd2": 0xB5, "0xd3": 0x66, "0xd4": 0x48, "0xd5": 0x03, "0xd6": 0xF6, "0xd7": 0x0E,
        "0xd8": 0x61, "0xd9": 0x35, "0xda": 0x57, "0xdb": 0xB9, "0xdc": 0x86, "0xdd": 0xC1, "0xde": 0x1D, "0xdf": 0x9E,
        "0xe0": 0xE1, "0xe1": 0xF8, "0xe2": 0x98, "0xe3": 0x11, "0xe4": 0x69, "0xe5": 0xD9, "0xe6": 0x8E, "0xe7": 0x94,
        "0xe8": 0x9B, "0xe9": 0x1E, "0xea": 0x87, "0xeb": 0xE9, "0xec": 0xCE, "0xed": 0x55, "0xee": 0x28, "0xef": 0xDF,
        "0xf0": 0x8C, "0xf1": 0xA1, "0xf2": 0x89, "0xf3": 0x0D, "0xf4": 0xBF, "0xf5": 0xE6, "0xf6": 0x42, "0xf7": 0x68,
        "0xf8": 0x41, "0xf9": 0x99, "0xfa": 0x2D, "0xfb": 0x0F, "0xfc": 0xB0, "0xfd": 0x54, "0xfe": 0xBB, "0xff": 0x16}

sbox_inv = {"0x0": 0x52, "0x1": 0x09, "0x2": 0x6A, "0x3": 0xD5, "0x4": 0x30, "0x5": 0x36, "0x6": 0xA5, "0x7": 0x38,
            "0x8": 0xBF, "0x9": 0x40, "0xa": 0xA3, "0xb": 0x9E, "0xc": 0x81, "0xd": 0xF3, "0xe": 0xD7, "0xf": 0xFB,
            "0x10": 0x7C, "0x11": 0xE3, "0x12": 0x39, "0x13": 0x82, "0x14": 0x9B, "0x15": 0x2F, "0x16": 0xFF,
            "0x17": 0x87, "0x18": 0x34, "0x19": 0x8E, "0x1a": 0x43, "0x1b": 0x44, "0x1c": 0xC4, "0x1d": 0xDE,
            "0x1e": 0xE9, "0x1f": 0xCB,
            "0x20": 0x54, "0x21": 0x7B, "0x22": 0x94, "0x23": 0x32, "0x24": 0xA6, "0x25": 0xC2, "0x26": 0x23,
            "0x27": 0x3D, "0x28": 0xEE, "0x29": 0x4C, "0x2a": 0x95, "0x2b": 0x0B, "0x2c": 0x42, "0x2d": 0xFA,
            "0x2e": 0xC3, "0x2f": 0x4E,
            "0x30": 0x08, "0x31": 0x2E, "0x32": 0xA1, "0x33": 0x66, "0x34": 0x28, "0x35": 0xD9, "0x36": 0x24,
            "0x37": 0xB2, "0x38": 0x76, "0x39": 0x5B, "0x3a": 0xA2, "0x3b": 0x49, "0x3c": 0x6D, "0x3d": 0x8B,
            "0x3e": 0xD1, "0x3f": 0x25,
            "0x40": 0x72, "0x41": 0xF8, "0x42": 0xF6, "0x43": 0x64, "0x44": 0x86, "0x45": 0x68, "0x46": 0x98,
            "0x47": 0x16, "0x48": 0xD4, "0x49": 0xA4, "0x4a": 0x5C, "0x4b": 0xCC, "0x4c": 0x5D, "0x4d": 0x65,
            "0x4e": 0xB6, "0x4f": 0x92,
            "0x50": 0x6C, "0x51": 0x70, "0x52": 0x48, "0x53": 0x50, "0x54": 0xFD, "0x55": 0xED, "0x56": 0xB9,
            "0x57": 0xDA, "0x58": 0x5E, "0x59": 0x15, "0x5a": 0x46, "0x5b": 0x57, "0x5c": 0xA7, "0x5d": 0x8D,
            "0x5e": 0x9D, "0x5f": 0x84,
            "0x60": 0x90, "0x61": 0xD8, "0x62": 0xAB, "0x63": 0x00, "0x64": 0x8C, "0x65": 0xBC, "0x66": 0xD3,
            "0x67": 0x0A, "0x68": 0xF7, "0x69": 0xE4, "0x6a": 0x58, "0x6b": 0x05, "0x6c": 0xB8, "0x6d": 0xB3,
            "0x6e": 0x45, "0x6f": 0x06,
            "0x70": 0xD0, "0x71": 0x2C, "0x72": 0x1E, "0x73": 0x8F, "0x74": 0xCA, "0x75": 0x3F, "0x76": 0x0F,
            "0x77": 0x02, "0x78": 0xC1, "0x79": 0xAF, "0x7a": 0xBD, "0x7b": 0x03, "0x7c": 0x01, "0x7d": 0x13,
            "0x7e": 0x8A, "0x7f": 0x6B,
            "0x80": 0x3A, "0x81": 0x91, "0x82": 0x11, "0x83": 0x41, "0x84": 0x4F, "0x85": 0x67, "0x86": 0xDC,
            "0x87": 0xEA, "0x88": 0x97, "0x89": 0xF2, "0x8a": 0xCF, "0x8b": 0xCE, "0x8c": 0xF0, "0x8d": 0xB4,
            "0x8e": 0xE6, "0x8f": 0x73,
            "0x90": 0x96, "0x91": 0xAC, "0x92": 0x74, "0x93": 0x22, "0x94": 0xE7, "0x95": 0xAD, "0x96": 0x35,
            "0x97": 0x85, "0x98": 0xE2, "0x99": 0xF9, "0x9a": 0x37, "0x9b": 0xE8, "0x9c": 0x1C, "0x9d": 0x75,
            "0x9e": 0xDF, "0x9f": 0x6E,
            "0xa0": 0x47, "0xa1": 0xF1, "0xa2": 0x1A, "0xa3": 0x71, "0xa4": 0x1D, "0xa5": 0x29, "0xa6": 0xC5,
            "0xa7": 0x89, "0xa8": 0x6F, "0xa9": 0xB7, "0xaa": 0x62, "0xab": 0x0E, "0xac": 0xAA, "0xad": 0x18,
            "0xae": 0xBE, "0xaf": 0x1B,
            "0xb0": 0xFC, "0xb1": 0x56, "0xb2": 0x3E, "0xb3": 0x4B, "0xb4": 0xC6, "0xb5": 0xD2, "0xb6": 0x79,
            "0xb7": 0x20, "0xb8": 0x9A, "0xb9": 0xDB, "0xba": 0xC0, "0xbb": 0xFE, "0xbc": 0x78, "0xbd": 0xCD,
            "0xbe": 0x5A, "0xbf": 0xF4,
            "0xc0": 0x1F, "0xc1": 0xDD, "0xc2": 0xA8, "0xc3": 0x33, "0xc4": 0x88, "0xc5": 0x07, "0xc6": 0xC7,
            "0xc7": 0x31, "0xc8": 0xB1, "0xc9": 0x12, "0xca": 0x10, "0xcb": 0x59, "0xcc": 0x27, "0xcd": 0x80,
            "0xce": 0xEC, "0xcf": 0x5F,
            "0xd0": 0x60, "0xd1": 0x51, "0xd2": 0x7F, "0xd3": 0xA9, "0xd4": 0x19, "0xd5": 0xB5, "0xd6": 0x4A,
            "0xd7": 0x0D, "0xd8": 0x2D, "0xd9": 0xE5, "0xda": 0x7A, "0xdb": 0x9F, "0xdc": 0x93, "0xdd": 0xC9,
            "0xde": 0x9C, "0xdf": 0xEF,
            "0xe0": 0xA0, "0xe1": 0xE0, "0xe2": 0x3B, "0xe3": 0x4D, "0xe4": 0xAE, "0xe5": 0x2A, "0xe6": 0xF5,
            "0xe7": 0xB0, "0xe8": 0xC8, "0xe9": 0xEB, "0xea": 0xBB, "0xeb": 0x3C, "0xec": 0x83, "0xed": 0x53,
            "0xee": 0x99, "0xef": 0x61,
            "0xf0": 0x17, "0xf1": 0x2B, "0xf2": 0x04, "0xf3": 0x7E, "0xf4": 0xBA, "0xf5": 0x77, "0xf6": 0xD6,
            "0xf7": 0x26, "0xf8": 0xE1, "0xf9": 0x69, "0xfa": 0x14, "0xfb": 0x63, "0xfc": 0x55, "0xfd": 0x21,
            "0xfe": 0x0C, "0xff": 0x7D}

r_con = (0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36)

xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)


def get_TextKey(message: str, key: str) -> list:
    col = 4
    x = [hex(ord(c)) for c in message]
    matrix_x = [x[i:i + 4] for i in range(0, len(x), col)]
    # transpose rows and columns
    message_x = [[matrix_x[j][i] for j in range(len(matrix_x))] for i in range(len(matrix_x[0]))]

    y = [hex(ord(c)) for c in key]
    matrix_x1 = [y[i:i + 4] for i in range(0, len(x), col)]
    # transpose rows and columns
    key_x = [[matrix_x1[j][i] for j in range(len(matrix_x1))] for i in range(len(matrix_x1[0]))]

    return message_x, key_x


def shift_Rows(a: list) -> None:
    # shift 1 to the left
    a[1][0], a[1][1], a[1][2], a[1][3] = a[1][1], a[1][2], a[1][3], a[1][0]
    # shift 2 to the left
    a[2][0], a[2][1], a[2][2], a[2][3] = a[2][2], a[2][3], a[2][0], a[2][1]
    # shift 3 to the left
    a[3][0], a[3][1], a[3][2], a[3][3] = a[3][3], a[3][0], a[3][1], a[3][2]


def inv_shift_Rows(a: list) -> None:
    # shift 1 to the left
    a[1][0], a[1][1], a[1][2], a[1][3] = a[1][3], a[1][0], a[1][1], a[1][2]
    # shift 2 to the left
    a[2][0], a[2][1], a[2][2], a[2][3] = a[2][2], a[2][3], a[2][0], a[2][1]
    # shift 3 to the left
    a[3][0], a[3][1], a[3][2], a[3][3] = a[3][1], a[3][2], a[3][3], a[3][0]


def shift_Col(a: list) -> None:
    # move each number on the far right column up
    a[0][3], a[1][3], a[2][3], a[3][3] = a[1][3], a[2][3], a[3][3], a[0][3]


def sub_Bytes(m: list) -> None:
    for i in range(4):
        for j in range(4):

            # get the first byte of the text
            index = m[i][j][:]
            # combine the bytes and look it up in the table
            val = sbox[index]
            # format digits 1-9
            if val < 10:
                new = '0x0' + str(val)
                m[i][j] = new
            # format digits A-F
            elif val > 9 and val < 16:
                new = "0x0" + str(hex(val))[2]
                m[i][j] = new
            else:

                m[i][j] = hex(val)


def inv_sub_Bytes(m):
    for i in range(4):
        for j in range(4):

            # get the first byte of the text
            index = m[i][j][:]
            # combine the bytes and look it up in the table
            val = sbox_inv[index]
            # format digits 1-9
            if val < 10:
                new = '0x0' + str(val)
                m[i][j] = new
            # format digits A-F
            elif val > 9 and val < 16:
                new = "0x0" + str(hex(val))[2]
                m[i][j] = new
            else:

                m[i][j] = hex(val)


def add_Round_Key(m, k):
    for i in range(4):
        for j in range(4):
            x = hex(int(m[i][j], 0) ^ int(k[i][j], 0))
            m[i][j] = x


def key_expansion(key: any, round: int) -> list:
    tmp_key = deepcopy(key)
    # move column up
    shift_Col(key)
    # s box the last column
    key_round = [sbox[key[i][3]] for i in range(4)]
    key = deepcopy(tmp_key)

    for j in range(4):
        for k in range(4):
            if j == 0 and k == 0:
                # xor the first numer by rcon and first column of key
                key[k][j] = hex(int(key[k][j], 16) ^ key_round[k] ^ r_con[round])
            elif j == 0 and k > 0:
                key[k][j] = hex(int(key[k][j], 16) ^ key_round[k])
            else:  # xor the rest of the columns
                key[k][j] = hex(int(key[k][j - 1], 16) ^ int(key[k][j], 16))

    return key


def key_list(key: list) -> dict:
    keys = {}
    keys[0] = key_expansion(key, 0)
    for i in range(1, 10):
        copy = deepcopy(keys[i - 1])
        keys[i] = key_expansion(copy, i)
    return keys


def mix_single_column(a):
    t = a[0] ^ a[1] ^ a[2] ^ a[3]
    u = a[0]
    a[0] ^= t ^ xtime(a[0] ^ a[1])
    a[1] ^= t ^ xtime(a[1] ^ a[2])
    a[2] ^= t ^ xtime(a[2] ^ a[3])
    a[3] ^= t ^ xtime(a[3] ^ u)


def inv_mix_columns(s):
    # convert hex to ints and  turn columns into rows
    x = [[int(s[j][i], 16) for j in range(len(s))] for i in range(len(s[0]))]
    for i in range(4):
        v = xtime(xtime(x[i][1] ^ x[i][3]))
        u = xtime(xtime(x[i][0] ^ x[i][2]))
        x[i][0] ^= u
        x[i][1] ^= v
        x[i][2] ^= u
        x[i][3] ^= v

    return i_mix_columns(x)

def i_mix_columns(m: list) -> list:

    # mix columns one by one
    for i in range(4):
        mix_single_column(m[i])
    # turn rows back to columns and change ints to hex
    b = [[hex(m[j][i]) for j in range(len(m))] for i in range(len(m[0]))]

    return b

def mix_columns(m: list) -> list:
    # convert hex to ints and  turn columns into rows
    x = [[int(m[j][i], 16) for j in range(len(m))] for i in range(len(m[0]))]
    # mix columns one by one
    for i in range(4):
        mix_single_column(x[i])
    # turn rows back to columns and change ints to hex
    b = [[hex(x[j][i]) for j in range(len(x))] for i in range(len(x[0]))]

    return b


def overwrite_file(text: list, file_ref: str) -> None:
    encryptedtxt = ""

    for i in range(4):
        for j in range(4):
            encryptedtxt = encryptedtxt + (chr(int(text[j][i], 16)))
    file = open(file_ref, 'w')
    file.write(encryptedtxt)
    file.close()


class AES:

    def encrypt_File(self, file_reference: str, key: str) -> None:
        file = open(file_reference, 'r')
        plaintext = file.read()
        file.close()
        matrix = get_TextKey(plaintext, key)
        ciphertext, private_key = matrix[0], matrix[1]
        add_Round_Key(ciphertext, private_key)
        keys = key_list(private_key)
        for i in range(0, 9):
            sub_Bytes(ciphertext)
            shift_Rows(ciphertext)
            ciphertext = mix_columns(ciphertext)
            add_Round_Key(ciphertext, keys[i])
        sub_Bytes(ciphertext)
        shift_Rows(ciphertext)
        add_Round_Key(ciphertext, keys[9])
        overwrite_file(ciphertext, file_reference)

    def decrypt_File(self, file_reference: str, key: str) -> None:
        file = open(file_reference, 'r')
        plaintext = file.read()
        file.close()
        matrix = get_TextKey(plaintext, key)
        ciphertext, private_key = matrix[0], matrix[1]
        final_key = deepcopy(private_key)
        keys = key_list(private_key)
        add_Round_Key(ciphertext, keys[9])
        for i in range(0, 9):
            inv_shift_Rows(ciphertext)
            inv_sub_Bytes(ciphertext)
            add_Round_Key(ciphertext, keys[8 - i])
            ciphertext = inv_mix_columns(ciphertext)
        inv_shift_Rows(ciphertext)
        inv_sub_Bytes(ciphertext)
        add_Round_Key(ciphertext, final_key)
        overwrite_file(ciphertext, file_reference)